{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/collections/Table/TableBody.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeader.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableFooter.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeaderCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableRow.js","../node_modules/semantic-ui-react/dist/es/collections/Table/Table.js","components/Orders/orders.jsx"],"names":["TableBody","props","children","className","classes","rest","getUnhandledProps","ElementType","getElementType","createElement","handledProps","defaultProps","as","propTypes","TableCell","active","collapsing","content","disabled","error","icon","negative","positive","selectable","singleLine","textAlign","verticalAlign","warning","width","isNil","Icon","create","TableHeader","fullWidth","TableFooter","TableHeaderCell","sorted","TableRow","cellAs","cells","cell","Table","attached","basic","celled","color","columns","compact","definition","fixed","footerRow","headerRow","headerRows","inverted","padded","renderBodyRow","size","sortable","stackable","striped","structured","tableData","unstackable","headerShorthandOptions","headerElement","data","index","Body","Cell","Footer","Header","HeaderCell","Row","Orders","state","mobile","items","this","firebase","firestore","collection","get","then","snapshot","docs","forEach","doc","item","push","setState","document","querySelector","clientWidth","console","log","Grid","Column","map","key","name","timestamp","email","number","address","description","gender","Component"],"mappings":"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","file":"static/js/4.8d5f5dee.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n\nfunction TableBody(props) {\n  var children = props.children,\n      className = props.className;\n  var classes = cx(className);\n  var rest = getUnhandledProps(TableBody, props);\n  var ElementType = getElementType(TableBody, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nTableBody.handledProps = [\"as\", \"children\", \"className\"];\nTableBody.defaultProps = {\n  as: 'tbody'\n};\nTableBody.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default TableBody;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\n\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A table can have a header.\n */\n\nfunction TableHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fullWidth = props.fullWidth;\n  var classes = cx(useKeyOnly(fullWidth, 'full-width'), className);\n  var rest = getUnhandledProps(TableHeader, props);\n  var ElementType = getElementType(TableHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nTableHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fullWidth\"];\nTableHeader.defaultProps = {\n  as: 'thead'\n};\nTableHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */\n  fullWidth: PropTypes.bool\n} : {};\nexport default TableHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps } from '../../lib';\nimport TableHeader from './TableHeader';\n/**\n * A table can have a footer.\n */\n\nfunction TableFooter(props) {\n  var as = props.as;\n  var rest = getUnhandledProps(TableFooter, props);\n  return React.createElement(TableHeader, _extends({}, rest, {\n    as: as\n  }));\n}\n\nTableFooter.handledProps = [\"as\"];\nTableFooter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType\n} : {};\nTableFooter.defaultProps = {\n  as: 'tfoot'\n};\nexport default TableFooter;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n      className = props.className,\n      sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\n\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have rows.\n */\n\nfunction TableRow(props) {\n  var active = props.active,\n      cellAs = props.cellAs,\n      cells = props.cells,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      error = props.error,\n      negative = props.negative,\n      positive = props.positive,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), className);\n  var rest = getUnhandledProps(TableRow, props);\n  var ElementType = getElementType(TableRow, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(cells, function (cell) {\n    return TableCell.create(cell, {\n      defaultProps: {\n        as: cellAs\n      }\n    });\n  }));\n}\n\nTableRow.handledProps = [\"active\", \"as\", \"cellAs\", \"cells\", \"children\", \"className\", \"disabled\", \"error\", \"negative\", \"positive\", \"textAlign\", \"verticalAlign\", \"warning\"];\nTableRow.defaultProps = {\n  as: 'tr',\n  cellAs: 'td'\n};\nTableRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** An element type to render as (string or function). */\n  cellAs: PropTypes.elementType,\n\n  /** Shorthand array of props for TableCell. */\n  cells: customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A row can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A row may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** A row may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A row may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A table row can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table row can adjust its vertical alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A row may warn a user. */\n  warning: PropTypes.bool\n} : {};\nTableRow.create = createShorthandFactory(TableRow, function (cells) {\n  return {\n    cells: cells\n  };\n});\nexport default TableRow;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      headerRows = props.headerRows,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var hasHeaderRows = headerRow || headerRows;\n  var headerShorthandOptions = {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  };\n  var headerElement = hasHeaderRows && React.createElement(TableHeader, null, TableRow.create(headerRow, headerShorthandOptions), _map(headerRows, function (data) {\n    return TableRow.create(data, headerShorthandOptions);\n  }));\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerElement, React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"headerRows\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided each row into separate cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.every([customPropTypes.disallow(['headerRows']), customPropTypes.itemShorthand]),\n\n  /** Shorthand for multiple TableRows to be placed within Table.Header. */\n  headerRows: customPropTypes.every([customPropTypes.disallow(['headerRow']), customPropTypes.collectionShorthand]),\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;","import React, { Component } from 'react'\nimport { Grid, Table } from 'semantic-ui-react'\nimport './orders.scss'\nimport firebase from '../../firebase'\n\nclass Orders extends Component {\n\n  constructor (props) {\n    super (props)\n    this.state = {\n      mobile: null,\n      items: null\n    }\n  }\n\n  componentDidMount () {\n    var mobile = this.state.mobile;\n    var db = firebase.firestore();\n    db.collection(\"order\").get().then((snapshot) => {\n      var items = [];\n      snapshot.docs.forEach(doc => {\n        let item = doc.data();\n        items.push(item)\n      });\n      this.setState({\n        items: items\n      })\n    });\n    if (!mobile) {\n      const body = document.querySelector('body').clientWidth\n      mobile = body <= 768 ? true : false\n      this.setState({\n        mobile: mobile\n      })\n    }\n  }\n\n  render () {\n\n    const { items, mobile } = this.state\n\n    console.log(this.state)\n    return (\n      <Grid className={'orders-container'}>\n        \n        <Grid.Column width={16}>\n\n        {\n          items &&\n          \n          <Table>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>\n                  Time made\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Email, Full name\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Phone number\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Address\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Description\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Size, Gender\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {\n                items.map(item => (\n                  <Table.Row key={item.name}>\n                    <Table.Cell>\n                      {item.timestamp}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {item.email}, {item.name}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {item.number}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {item.address}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {item.description}\n                    </Table.Cell>\n                    <Table.Cell>                      \n                      {item.size}, {item.gender}\n                    </Table.Cell>\n                  </Table.Row>\n                ))\n              }\n            </Table.Body>\n          </Table>\n        }\n        </Grid.Column>\n\n      </Grid>\n    )\n  }\n}\n\nexport default Orders\n"],"sourceRoot":""}